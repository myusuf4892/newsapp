openapi: 3.0.0
info:
  version: "1.0"
  title: "NewsApp"
  description: "NewsApp open API"
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/myusuf4892/newsapp/1.0
tags:
  - name: Login
    description: Authentication
  - name: Register
    description: Register
  - name: Posting
    description: Posting articles, opini, etc
paths:
  #############################
  #           LOGIN           #
  #############################
  /login:
    post:
      tags:
        - Login
      summary: Login User
      description: login user description
      requestBody:
        $ref: "#/components/requestBodies/loginRequestBody"
      responses:
        "200":
          $ref: "#/components/responses/loginResponseSuccess"
        "400":
          $ref: "#/components/responses/loginResponseFailed"
  #############################
  #         REGISTER          #
  #############################
  /register:
    post:
      tags:
        - Register
      summary: Register User
      description: register user description
      requestBody:
        $ref: "#/components/requestBodies/registerRequestBody"
      responses:
        "201":
          $ref: "#/components/responses/registerResponseSuccess"
        "400":
          $ref: "#/components/responses/registerResponseFailed"

  #############################
  #         POST_TYPE         #
  #############################
  /posts/categories:
    post:
      tags:
        - Posting
      summary: Create Post Type
      description: create post type or category articles
      security:
        - JWTAuth: []
      requestBody:
        $ref: "#/components/requestBodies/postTypeRequestBody"
      responses:
        "201":
          $ref: "#/components/responses/postTypeResponseSuccess"
        "400":
          $ref: "#/components/responses/postTypeResponseFailed"
    get:
      tags:
        - Posting
      summary: Get Post Type
      description: get post type or category articles
      security:
        - JWTAuth: []
      responses:
        "200":
          $ref: "#/components/responses/getPostTypeResponseSuccess"
        "400":
          $ref: "#/components/responses/getPostTypeResponseFailed"
  /posts/categories/{post_type_id}:
    put:
      tags:
        - Posting
      summary: Update Post Type
      description: update post type or category articles
      parameters:
        - $ref: "#/components/parameters/post_type_id"
      security:
        - JWTAuth: []
      responses:
        "200":
          $ref: "#/components/responses/putPostTypeResponseSuccess"
        "400":
          $ref: "#/components/responses/putPostTypeResponseFailed"
    delete:
      tags:
        - Posting
      summary: Delete Post Type
      description: delete post type or category articles
      parameters:
        - $ref: "#/components/parameters/post_type_id"
      security:
        - JWTAuth: []
      responses:
        "200":
          $ref: "#/components/responses/deletePostTypeResponseSuccess"
        "400":
          $ref: "#/components/responses/deletePostTypeResponseFailed"
  #############################
  #           POST            #
  #############################
  /posts:
    post:
      tags:
        - Posting
      summary: Posting Article
      description: create posting by user
      security:
        - JWTAuth: []
      requestBody:
        $ref: "#/components/requestBodies/postingRequestBody"
      responses:
        "201":
          $ref: "#/components/responses/postingResponseSuccess"
        "400":
          $ref: "#/components/responses/postingResponseFailed"
    get:
      tags:
        - Posting
      summary: Get Articles
      description: get posting by user
      security:
        - JWTAuth: []
      responses:
        "200":
          $ref: "#/components/responses/getPostingResponses"
        "400":
          $ref: "#/components/responses/getPostingResponsesFailed"
  /posts/{post_id}:
    put:
      tags:
        - Posting
      summary: Update Article
      description: update posting by user
      parameters:
        - $ref: "#/components/parameters/post_id"
      security:
        - JWTAuth: []
      responses:
        "200":
          $ref: "#/components/responses/putPostingResponseSuccess"
        "400":
          $ref: "#/components/responses/putPostingResponseFailed"
    delete:
      tags:
        - Posting
      summary: Delete Article
      description: delete posting by user
      parameters:
        - $ref: "#/components/parameters/post_id"
      security:
        - JWTAuth: []
      responses:
        "200":
          $ref: "#/components/responses/deletePostingResponseSuccess"
        "400":
          $ref: "#/components/responses/deletePostingResponseFailed"
#############################
#        COMPONENTS         #
#############################

components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "use Token"

  #############################
  #          SCHEMAS          #
  #############################
  schemas:
    requestLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          minLength: 1
        password:
          type: string
          minLength: 1
    responseLoginSuccess:
      type: object
      properties:
        code:
          type: number
        message:
          type: string
        status:
          type: string
        data:
          type: object
    requestRegister:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          minLength: 1
        email:
          type: string
          minLength: 1
        password:
          type: string
          minLength: 1
    responseRegisterSuccess:
      type: object
      properties:
        code:
          type: number
        message:
          type: string
        status:
          type: string
    requestPostType:
      type: object
      required:
        - category
        - type
      properties:
        category:
          type: string
        type:
          type: string
    requestPosting:
      type: object
      required:
        - post_type_id
      properties:
        tittle:
          type: string
        description:
          type: string
        post_type_id:
          type: number
    responseWithData:
      type: object
      properties:
        code:
          type: number
        message:
          type: string
        currentTime:
          type: string
        data:
          type: object
    responseWithNoData:
      type: object
      properties:
        code:
          type: number
        message:
          type: string
  #############################
  #      REQUEST BODIES       #
  #############################
  requestBodies:
    loginRequestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/requestLogin"
          examples:
            userData:
              description: data user for login
              value:
                email: user@gmail.com
                password: password123
        multipart/form-data:
          schema:
            $ref: "#/components/schemas/requestLogin"
    registerRequestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/requestRegister"
          examples:
            userData:
              description: data user for register
              value:
                name: Budi Setiawan
                email: budi@gmail.com
                password: inibudi
        multipart/form-data:
          schema:
            $ref: "#/components/schemas/requestRegister"
    postingRequestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/requestPosting"
          examples:
            postingData:
              description: data posting article
              value:
                tittle: Kita bisa
                description: Indonesia bisa maju
                post_type_id: 1
        multipart/form-data:
          schema:
            $ref: "#/components/schemas/requestPosting"
    postTypeRequestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/requestPostType"
          examples:
            postTypeData:
              description: data post type
              value:
                category: Opini
                type: Artikel
        multipart/form-data:
          schema:
            $ref: "#/components/schemas/requestPostType"
  #############################
  #         RESPONSES         #
  #############################
  responses:
    loginResponseSuccess:
      description: login success
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseLoginSuccess"
          examples:
            responseData:
              description: response success
              value:
                code: 200
                message: login success
                data:
                  user_id: 1
                  full_name: muhamad yusup
                  token: >-
                    eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE2MzgzMjYxODAsInVzZXJJZCI6MSwidXNlcm5hbWUiOiJhZG1pbiJ9.AebFR-oQjUSOMez2ucDWkiMrS2eQIPmcYm5c71qZ_co
    loginResponseFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseWithNoData"
          examples:
            responseFailedGetData:
              description: response failed
              value:
                code: 400
                message: email or password incorrect
            responseFailedServer:
              description: response failed
              value:
                code: 500
                message: error server
    registerResponseSuccess:
      description: register success
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseRegisterSuccess"
          examples:
            responseRegisterSuccess:
              description: response success
              value:
                code: 201
                message: register success
    registerResponseFailed:
      description: register failed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseWithNoData"
          examples:
            Invalid Name:
              $ref: "#/components/examples/invalidName"
            Invalid Email:
              $ref: "#/components/examples/invalidEmail"
            Invalid Password:
              $ref: "#/components/examples/invalidPassword"
            All Data Not Filled:
              $ref: "#/components/examples/allDataNotFilled"
    postTypeResponseSuccess:
      description: insert post type success
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseWithNoData"
          examples:
            responsePostType:
              description: response success
              value:
                code: 201
                message: success insert post type
    postTypeResponseFailed:
      description: insert post type failed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseWithNoData"
          examples:
            responsePostType:
              description: response failed
              value:
                code: 400
                message: insert post type failed
    getPostTypeResponseSuccess:
      description: get post type success
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseWithData"
          examples:
            responseGetPostTypeSuccess:
              description: response success
              value:
                code: 200
                message: success get data
                data:
                  - category_id: 1
                    category: Opini
                    type: Artikel
    getPostTypeResponseFailed:
      description: get post type failed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseWithNoData"
          examples:
            responseGetPostTypeFailed:
              description: response failed
              value:
                code: 400
                message: get post type failed
    putPostTypeResponseSuccess:
      description: update posting success
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseWithNoData"
          example:
            code: 200
            message: update posting success
    putPostTypeResponseFailed:
      description: update posting failed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseWithNoData"
          example:
            code: 400
            message: update posting failed
    deletePostTypeResponseSuccess:
      description: delete posting success
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseWithNoData"
          example:
            code: 200
            message: delete posting success
    deletePostTypeResponseFailed:
      description: delete posting failed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseWithNoData"
          example:
            code: 400
            message: delete posting failed
    postingResponseSuccess:
      description: posting success
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseWithNoData"
          examples:
            responseData:
              description: response success
              value:
                code: 201
                message: posting success
    postingResponseFailed:
      description: posting failed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseWithNoData"
          example:
            code: 400
            message: insert posting failed
    getPostingResponses:
      description: get posting success
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseWithData"
          examples:
            responseData:
              description: response success
              value:
                code: 200
                message: success get data posting
                data:
                  tittle: Kita bisa
                  description: Indonesia bisa maju
                  post_type_id: 1
                  user_id: 1
                  user:
                    author: muhamad yusup
                  post_type:
                    category: Opini
                    type: Artikel
    getPostingResponsesFailed:
      description: get posting failed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseWithNoData"
          example:
            code: 400
            message: get posting failed
    putPostingResponseSuccess:
      description: update posting success
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseWithNoData"
          example:
            code: 200
            message: update posting success
    putPostingResponseFailed:
      description: update posting failed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseWithNoData"
          example:
            code: 400
            message: update posting failed
    deletePostingResponseSuccess:
      description: delete posting success
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseWithNoData"
          example:
            code: 200
            message: delete posting success
    deletePostingResponseFailed:
      description: delete posting failed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseWithNoData"
          example:
            code: 400
            message: delete posting failed

  #############################
  #         EXAMPLES          #
  #############################
  examples:
    responseFailed:
      description: create failed
      value:
        code: 400
        message: create failed
    invalidName:
      description: invalid Name
      value:
        code: 400
        message: invalid name
    invalidEmail:
      description: invalid Email
      value:
        code: 400
        message: invalid email
    invalidPassword:
      description: invalid password
      value:
        code: 400
        message: invalid password
    allDataNotFilled:
      description: all data not filled
      value:
        code: 400
        message: all data must be filled
  #############################
  #        PARAMETERS         #
  #############################
  parameters:
    post_id:
      in: path
      name: post_id
      required: true
      schema:
        type: number
        example: 1
    post_type_id:
      in: path
      name: post_type_id
      required: true
      schema:
        type: number
        example: 1
